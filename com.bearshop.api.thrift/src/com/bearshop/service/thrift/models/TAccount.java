/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bear.shop.service.api.thrift.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAccount implements org.apache.thrift.TBase<TAccount, TAccount._Fields>, java.io.Serializable, Cloneable, Comparable<TAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccount");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASS_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("passWord", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("setting", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogin", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pageId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PERMISSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DATE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateCreated", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField DATE_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateModified", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAccountTupleSchemeFactory());
  }

  public int id; // required
  public String userName; // required
  public String passWord; // required
  public String firstName; // required
  public String lastName; // required
  public int type; // required
  public String email; // required
  public String address; // required
  public String phone; // required
  public String avatar; // required
  public int setting; // required
  public int status; // required
  public String lastLogin; // required
  public String pageId; // required
  public String permissionId; // required
  public String expireTime; // required
  public String dateCreated; // required
  public String dateModified; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_NAME((short)2, "userName"),
    PASS_WORD((short)3, "passWord"),
    FIRST_NAME((short)4, "firstName"),
    LAST_NAME((short)5, "lastName"),
    TYPE((short)6, "type"),
    EMAIL((short)7, "email"),
    ADDRESS((short)8, "address"),
    PHONE((short)9, "phone"),
    AVATAR((short)10, "avatar"),
    SETTING((short)11, "setting"),
    STATUS((short)12, "status"),
    LAST_LOGIN((short)13, "lastLogin"),
    PAGE_ID((short)14, "pageId"),
    PERMISSION_ID((short)15, "permissionId"),
    EXPIRE_TIME((short)16, "expireTime"),
    DATE_CREATED((short)17, "dateCreated"),
    DATE_MODIFIED((short)18, "dateModified");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // PASS_WORD
          return PASS_WORD;
        case 4: // FIRST_NAME
          return FIRST_NAME;
        case 5: // LAST_NAME
          return LAST_NAME;
        case 6: // TYPE
          return TYPE;
        case 7: // EMAIL
          return EMAIL;
        case 8: // ADDRESS
          return ADDRESS;
        case 9: // PHONE
          return PHONE;
        case 10: // AVATAR
          return AVATAR;
        case 11: // SETTING
          return SETTING;
        case 12: // STATUS
          return STATUS;
        case 13: // LAST_LOGIN
          return LAST_LOGIN;
        case 14: // PAGE_ID
          return PAGE_ID;
        case 15: // PERMISSION_ID
          return PERMISSION_ID;
        case 16: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 17: // DATE_CREATED
          return DATE_CREATED;
        case 18: // DATE_MODIFIED
          return DATE_MODIFIED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __SETTING_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASS_WORD, new org.apache.thrift.meta_data.FieldMetaData("passWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTING, new org.apache.thrift.meta_data.FieldMetaData("setting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("lastLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("pageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERMISSION_ID, new org.apache.thrift.meta_data.FieldMetaData("permissionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("dateCreated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("dateModified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccount.class, metaDataMap);
  }

  public TAccount() {
  }

  public TAccount(
    int id,
    String userName,
    String passWord,
    String firstName,
    String lastName,
    int type,
    String email,
    String address,
    String phone,
    String avatar,
    int setting,
    int status,
    String lastLogin,
    String pageId,
    String permissionId,
    String expireTime,
    String dateCreated,
    String dateModified)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userName = userName;
    this.passWord = passWord;
    this.firstName = firstName;
    this.lastName = lastName;
    this.type = type;
    setTypeIsSet(true);
    this.email = email;
    this.address = address;
    this.phone = phone;
    this.avatar = avatar;
    this.setting = setting;
    setSettingIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.lastLogin = lastLogin;
    this.pageId = pageId;
    this.permissionId = permissionId;
    this.expireTime = expireTime;
    this.dateCreated = dateCreated;
    this.dateModified = dateModified;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccount(TAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetPassWord()) {
      this.passWord = other.passWord;
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    this.type = other.type;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    this.setting = other.setting;
    this.status = other.status;
    if (other.isSetLastLogin()) {
      this.lastLogin = other.lastLogin;
    }
    if (other.isSetPageId()) {
      this.pageId = other.pageId;
    }
    if (other.isSetPermissionId()) {
      this.permissionId = other.permissionId;
    }
    if (other.isSetExpireTime()) {
      this.expireTime = other.expireTime;
    }
    if (other.isSetDateCreated()) {
      this.dateCreated = other.dateCreated;
    }
    if (other.isSetDateModified()) {
      this.dateModified = other.dateModified;
    }
  }

  public TAccount deepCopy() {
    return new TAccount(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.userName = null;
    this.passWord = null;
    this.firstName = null;
    this.lastName = null;
    setTypeIsSet(false);
    this.type = 0;
    this.email = null;
    this.address = null;
    this.phone = null;
    this.avatar = null;
    setSettingIsSet(false);
    this.setting = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.lastLogin = null;
    this.pageId = null;
    this.permissionId = null;
    this.expireTime = null;
    this.dateCreated = null;
    this.dateModified = null;
  }

  public int getId() {
    return this.id;
  }

  public TAccount setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public TAccount setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getPassWord() {
    return this.passWord;
  }

  public TAccount setPassWord(String passWord) {
    this.passWord = passWord;
    return this;
  }

  public void unsetPassWord() {
    this.passWord = null;
  }

  /** Returns true if field passWord is set (has been assigned a value) and false otherwise */
  public boolean isSetPassWord() {
    return this.passWord != null;
  }

  public void setPassWordIsSet(boolean value) {
    if (!value) {
      this.passWord = null;
    }
  }

  public String getFirstName() {
    return this.firstName;
  }

  public TAccount setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getLastName() {
    return this.lastName;
  }

  public TAccount setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public TAccount setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getEmail() {
    return this.email;
  }

  public TAccount setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public TAccount setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public TAccount setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getAvatar() {
    return this.avatar;
  }

  public TAccount setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public int getSetting() {
    return this.setting;
  }

  public TAccount setSetting(int setting) {
    this.setting = setting;
    setSettingIsSet(true);
    return this;
  }

  public void unsetSetting() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTING_ISSET_ID);
  }

  /** Returns true if field setting is set (has been assigned a value) and false otherwise */
  public boolean isSetSetting() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTING_ISSET_ID);
  }

  public void setSettingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTING_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TAccount setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLastLogin() {
    return this.lastLogin;
  }

  public TAccount setLastLogin(String lastLogin) {
    this.lastLogin = lastLogin;
    return this;
  }

  public void unsetLastLogin() {
    this.lastLogin = null;
  }

  /** Returns true if field lastLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLogin() {
    return this.lastLogin != null;
  }

  public void setLastLoginIsSet(boolean value) {
    if (!value) {
      this.lastLogin = null;
    }
  }

  public String getPageId() {
    return this.pageId;
  }

  public TAccount setPageId(String pageId) {
    this.pageId = pageId;
    return this;
  }

  public void unsetPageId() {
    this.pageId = null;
  }

  /** Returns true if field pageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPageId() {
    return this.pageId != null;
  }

  public void setPageIdIsSet(boolean value) {
    if (!value) {
      this.pageId = null;
    }
  }

  public String getPermissionId() {
    return this.permissionId;
  }

  public TAccount setPermissionId(String permissionId) {
    this.permissionId = permissionId;
    return this;
  }

  public void unsetPermissionId() {
    this.permissionId = null;
  }

  /** Returns true if field permissionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPermissionId() {
    return this.permissionId != null;
  }

  public void setPermissionIdIsSet(boolean value) {
    if (!value) {
      this.permissionId = null;
    }
  }

  public String getExpireTime() {
    return this.expireTime;
  }

  public TAccount setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  public void unsetExpireTime() {
    this.expireTime = null;
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return this.expireTime != null;
  }

  public void setExpireTimeIsSet(boolean value) {
    if (!value) {
      this.expireTime = null;
    }
  }

  public String getDateCreated() {
    return this.dateCreated;
  }

  public TAccount setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  public void unsetDateCreated() {
    this.dateCreated = null;
  }

  /** Returns true if field dateCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetDateCreated() {
    return this.dateCreated != null;
  }

  public void setDateCreatedIsSet(boolean value) {
    if (!value) {
      this.dateCreated = null;
    }
  }

  public String getDateModified() {
    return this.dateModified;
  }

  public TAccount setDateModified(String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  public void unsetDateModified() {
    this.dateModified = null;
  }

  /** Returns true if field dateModified is set (has been assigned a value) and false otherwise */
  public boolean isSetDateModified() {
    return this.dateModified != null;
  }

  public void setDateModifiedIsSet(boolean value) {
    if (!value) {
      this.dateModified = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case PASS_WORD:
      if (value == null) {
        unsetPassWord();
      } else {
        setPassWord((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case SETTING:
      if (value == null) {
        unsetSetting();
      } else {
        setSetting((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LAST_LOGIN:
      if (value == null) {
        unsetLastLogin();
      } else {
        setLastLogin((String)value);
      }
      break;

    case PAGE_ID:
      if (value == null) {
        unsetPageId();
      } else {
        setPageId((String)value);
      }
      break;

    case PERMISSION_ID:
      if (value == null) {
        unsetPermissionId();
      } else {
        setPermissionId((String)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((String)value);
      }
      break;

    case DATE_CREATED:
      if (value == null) {
        unsetDateCreated();
      } else {
        setDateCreated((String)value);
      }
      break;

    case DATE_MODIFIED:
      if (value == null) {
        unsetDateModified();
      } else {
        setDateModified((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case USER_NAME:
      return getUserName();

    case PASS_WORD:
      return getPassWord();

    case FIRST_NAME:
      return getFirstName();

    case LAST_NAME:
      return getLastName();

    case TYPE:
      return Integer.valueOf(getType());

    case EMAIL:
      return getEmail();

    case ADDRESS:
      return getAddress();

    case PHONE:
      return getPhone();

    case AVATAR:
      return getAvatar();

    case SETTING:
      return Integer.valueOf(getSetting());

    case STATUS:
      return Integer.valueOf(getStatus());

    case LAST_LOGIN:
      return getLastLogin();

    case PAGE_ID:
      return getPageId();

    case PERMISSION_ID:
      return getPermissionId();

    case EXPIRE_TIME:
      return getExpireTime();

    case DATE_CREATED:
      return getDateCreated();

    case DATE_MODIFIED:
      return getDateModified();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_NAME:
      return isSetUserName();
    case PASS_WORD:
      return isSetPassWord();
    case FIRST_NAME:
      return isSetFirstName();
    case LAST_NAME:
      return isSetLastName();
    case TYPE:
      return isSetType();
    case EMAIL:
      return isSetEmail();
    case ADDRESS:
      return isSetAddress();
    case PHONE:
      return isSetPhone();
    case AVATAR:
      return isSetAvatar();
    case SETTING:
      return isSetSetting();
    case STATUS:
      return isSetStatus();
    case LAST_LOGIN:
      return isSetLastLogin();
    case PAGE_ID:
      return isSetPageId();
    case PERMISSION_ID:
      return isSetPermissionId();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case DATE_CREATED:
      return isSetDateCreated();
    case DATE_MODIFIED:
      return isSetDateModified();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAccount)
      return this.equals((TAccount)that);
    return false;
  }

  public boolean equals(TAccount that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_passWord = true && this.isSetPassWord();
    boolean that_present_passWord = true && that.isSetPassWord();
    if (this_present_passWord || that_present_passWord) {
      if (!(this_present_passWord && that_present_passWord))
        return false;
      if (!this.passWord.equals(that.passWord))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_setting = true;
    boolean that_present_setting = true;
    if (this_present_setting || that_present_setting) {
      if (!(this_present_setting && that_present_setting))
        return false;
      if (this.setting != that.setting)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lastLogin = true && this.isSetLastLogin();
    boolean that_present_lastLogin = true && that.isSetLastLogin();
    if (this_present_lastLogin || that_present_lastLogin) {
      if (!(this_present_lastLogin && that_present_lastLogin))
        return false;
      if (!this.lastLogin.equals(that.lastLogin))
        return false;
    }

    boolean this_present_pageId = true && this.isSetPageId();
    boolean that_present_pageId = true && that.isSetPageId();
    if (this_present_pageId || that_present_pageId) {
      if (!(this_present_pageId && that_present_pageId))
        return false;
      if (!this.pageId.equals(that.pageId))
        return false;
    }

    boolean this_present_permissionId = true && this.isSetPermissionId();
    boolean that_present_permissionId = true && that.isSetPermissionId();
    if (this_present_permissionId || that_present_permissionId) {
      if (!(this_present_permissionId && that_present_permissionId))
        return false;
      if (!this.permissionId.equals(that.permissionId))
        return false;
    }

    boolean this_present_expireTime = true && this.isSetExpireTime();
    boolean that_present_expireTime = true && that.isSetExpireTime();
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (!this.expireTime.equals(that.expireTime))
        return false;
    }

    boolean this_present_dateCreated = true && this.isSetDateCreated();
    boolean that_present_dateCreated = true && that.isSetDateCreated();
    if (this_present_dateCreated || that_present_dateCreated) {
      if (!(this_present_dateCreated && that_present_dateCreated))
        return false;
      if (!this.dateCreated.equals(that.dateCreated))
        return false;
    }

    boolean this_present_dateModified = true && this.isSetDateModified();
    boolean that_present_dateModified = true && that.isSetDateModified();
    if (this_present_dateModified || that_present_dateModified) {
      if (!(this_present_dateModified && that_present_dateModified))
        return false;
      if (!this.dateModified.equals(that.dateModified))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassWord()).compareTo(other.isSetPassWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passWord, other.passWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(other.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, other.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetting()).compareTo(other.isSetSetting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setting, other.setting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLogin()).compareTo(other.isSetLastLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogin, other.lastLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageId()).compareTo(other.isSetPageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageId, other.pageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPermissionId()).compareTo(other.isSetPermissionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPermissionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionId, other.permissionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateCreated()).compareTo(other.isSetDateCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateCreated, other.dateCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateModified()).compareTo(other.isSetDateModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateModified, other.dateModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAccount(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passWord:");
    if (this.passWord == null) {
      sb.append("null");
    } else {
      sb.append(this.passWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar:");
    if (this.avatar == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setting:");
    sb.append(this.setting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLogin:");
    if (this.lastLogin == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLogin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageId:");
    if (this.pageId == null) {
      sb.append("null");
    } else {
      sb.append(this.pageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("permissionId:");
    if (this.permissionId == null) {
      sb.append("null");
    } else {
      sb.append(this.permissionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    if (this.expireTime == null) {
      sb.append("null");
    } else {
      sb.append(this.expireTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateCreated:");
    if (this.dateCreated == null) {
      sb.append("null");
    } else {
      sb.append(this.dateCreated);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateModified:");
    if (this.dateModified == null) {
      sb.append("null");
    } else {
      sb.append(this.dateModified);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccountStandardSchemeFactory implements SchemeFactory {
    public TAccountStandardScheme getScheme() {
      return new TAccountStandardScheme();
    }
  }

  private static class TAccountStandardScheme extends StandardScheme<TAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASS_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passWord = iprot.readString();
              struct.setPassWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SETTING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.setting = iprot.readI32();
              struct.setSettingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLogin = iprot.readString();
              struct.setLastLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageId = iprot.readString();
              struct.setPageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PERMISSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.permissionId = iprot.readString();
              struct.setPermissionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireTime = iprot.readString();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DATE_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateCreated = iprot.readString();
              struct.setDateCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DATE_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateModified = iprot.readString();
              struct.setDateModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.passWord != null) {
        oprot.writeFieldBegin(PASS_WORD_FIELD_DESC);
        oprot.writeString(struct.passWord);
        oprot.writeFieldEnd();
      }
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        oprot.writeFieldBegin(AVATAR_FIELD_DESC);
        oprot.writeString(struct.avatar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SETTING_FIELD_DESC);
      oprot.writeI32(struct.setting);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lastLogin != null) {
        oprot.writeFieldBegin(LAST_LOGIN_FIELD_DESC);
        oprot.writeString(struct.lastLogin);
        oprot.writeFieldEnd();
      }
      if (struct.pageId != null) {
        oprot.writeFieldBegin(PAGE_ID_FIELD_DESC);
        oprot.writeString(struct.pageId);
        oprot.writeFieldEnd();
      }
      if (struct.permissionId != null) {
        oprot.writeFieldBegin(PERMISSION_ID_FIELD_DESC);
        oprot.writeString(struct.permissionId);
        oprot.writeFieldEnd();
      }
      if (struct.expireTime != null) {
        oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
        oprot.writeString(struct.expireTime);
        oprot.writeFieldEnd();
      }
      if (struct.dateCreated != null) {
        oprot.writeFieldBegin(DATE_CREATED_FIELD_DESC);
        oprot.writeString(struct.dateCreated);
        oprot.writeFieldEnd();
      }
      if (struct.dateModified != null) {
        oprot.writeFieldBegin(DATE_MODIFIED_FIELD_DESC);
        oprot.writeString(struct.dateModified);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccountTupleSchemeFactory implements SchemeFactory {
    public TAccountTupleScheme getScheme() {
      return new TAccountTupleScheme();
    }
  }

  private static class TAccountTupleScheme extends TupleScheme<TAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetPassWord()) {
        optionals.set(2);
      }
      if (struct.isSetFirstName()) {
        optionals.set(3);
      }
      if (struct.isSetLastName()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetEmail()) {
        optionals.set(6);
      }
      if (struct.isSetAddress()) {
        optionals.set(7);
      }
      if (struct.isSetPhone()) {
        optionals.set(8);
      }
      if (struct.isSetAvatar()) {
        optionals.set(9);
      }
      if (struct.isSetSetting()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetLastLogin()) {
        optionals.set(12);
      }
      if (struct.isSetPageId()) {
        optionals.set(13);
      }
      if (struct.isSetPermissionId()) {
        optionals.set(14);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(15);
      }
      if (struct.isSetDateCreated()) {
        optionals.set(16);
      }
      if (struct.isSetDateModified()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetPassWord()) {
        oprot.writeString(struct.passWord);
      }
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetSetting()) {
        oprot.writeI32(struct.setting);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLastLogin()) {
        oprot.writeString(struct.lastLogin);
      }
      if (struct.isSetPageId()) {
        oprot.writeString(struct.pageId);
      }
      if (struct.isSetPermissionId()) {
        oprot.writeString(struct.permissionId);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeString(struct.expireTime);
      }
      if (struct.isSetDateCreated()) {
        oprot.writeString(struct.dateCreated);
      }
      if (struct.isSetDateModified()) {
        oprot.writeString(struct.dateModified);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.passWord = iprot.readString();
        struct.setPassWordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(9)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(10)) {
        struct.setting = iprot.readI32();
        struct.setSettingIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastLogin = iprot.readString();
        struct.setLastLoginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pageId = iprot.readString();
        struct.setPageIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.permissionId = iprot.readString();
        struct.setPermissionIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.expireTime = iprot.readString();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.dateCreated = iprot.readString();
        struct.setDateCreatedIsSet(true);
      }
      if (incoming.get(17)) {
        struct.dateModified = iprot.readString();
        struct.setDateModifiedIsSet(true);
      }
    }
  }

}

