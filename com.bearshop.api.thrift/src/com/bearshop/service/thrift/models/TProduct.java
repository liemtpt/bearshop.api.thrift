/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bear.shop.service.api.thrift.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TProduct implements org.apache.thrift.TBase<TProduct, TProduct._Fields>, java.io.Serializable, Cloneable, Comparable<TProduct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TProduct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VAT_FIELD_DESC = new org.apache.thrift.protocol.TField("vat", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SALE_FIELD_DESC = new org.apache.thrift.protocol.TField("sale", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SHORT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("shortDescription", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COLORS_FIELD_DESC = new org.apache.thrift.protocol.TField("colors", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SIZES_FIELD_DESC = new org.apache.thrift.protocol.TField("sizes", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField IS_HOT_FIELD_DESC = new org.apache.thrift.protocol.TField("isHot", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ORDERING_FIELD_DESC = new org.apache.thrift.protocol.TField("ordering", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField MODIFIED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedAt", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField USER_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("userCreated", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField USER_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("userModified", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TProductStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TProductTupleSchemeFactory());
  }

  public int id; // required
  public String code; // required
  public String title; // required
  public int price; // required
  public int vat; // required
  public int sale; // required
  public String avatar; // required
  public String images; // required
  public String shortDescription; // required
  public String description; // required
  public String url; // required
  public String tags; // required
  public String colors; // required
  public String sizes; // required
  public int categoryId; // required
  public int rate; // required
  public int type; // required
  public boolean isHot; // required
  public String source; // required
  public int ordering; // required
  public int status; // required
  public String createdAt; // required
  public String modifiedAt; // required
  public int userCreated; // required
  public int userModified; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    TITLE((short)3, "title"),
    PRICE((short)4, "price"),
    VAT((short)5, "vat"),
    SALE((short)6, "sale"),
    AVATAR((short)7, "avatar"),
    IMAGES((short)8, "images"),
    SHORT_DESCRIPTION((short)9, "shortDescription"),
    DESCRIPTION((short)10, "description"),
    URL((short)11, "url"),
    TAGS((short)12, "tags"),
    COLORS((short)13, "colors"),
    SIZES((short)14, "sizes"),
    CATEGORY_ID((short)15, "categoryId"),
    RATE((short)16, "rate"),
    TYPE((short)17, "type"),
    IS_HOT((short)18, "isHot"),
    SOURCE((short)19, "source"),
    ORDERING((short)20, "ordering"),
    STATUS((short)21, "status"),
    CREATED_AT((short)22, "createdAt"),
    MODIFIED_AT((short)23, "modifiedAt"),
    USER_CREATED((short)24, "userCreated"),
    USER_MODIFIED((short)25, "userModified");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // TITLE
          return TITLE;
        case 4: // PRICE
          return PRICE;
        case 5: // VAT
          return VAT;
        case 6: // SALE
          return SALE;
        case 7: // AVATAR
          return AVATAR;
        case 8: // IMAGES
          return IMAGES;
        case 9: // SHORT_DESCRIPTION
          return SHORT_DESCRIPTION;
        case 10: // DESCRIPTION
          return DESCRIPTION;
        case 11: // URL
          return URL;
        case 12: // TAGS
          return TAGS;
        case 13: // COLORS
          return COLORS;
        case 14: // SIZES
          return SIZES;
        case 15: // CATEGORY_ID
          return CATEGORY_ID;
        case 16: // RATE
          return RATE;
        case 17: // TYPE
          return TYPE;
        case 18: // IS_HOT
          return IS_HOT;
        case 19: // SOURCE
          return SOURCE;
        case 20: // ORDERING
          return ORDERING;
        case 21: // STATUS
          return STATUS;
        case 22: // CREATED_AT
          return CREATED_AT;
        case 23: // MODIFIED_AT
          return MODIFIED_AT;
        case 24: // USER_CREATED
          return USER_CREATED;
        case 25: // USER_MODIFIED
          return USER_MODIFIED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __VAT_ISSET_ID = 2;
  private static final int __SALE_ISSET_ID = 3;
  private static final int __CATEGORYID_ISSET_ID = 4;
  private static final int __RATE_ISSET_ID = 5;
  private static final int __TYPE_ISSET_ID = 6;
  private static final int __ISHOT_ISSET_ID = 7;
  private static final int __ORDERING_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __USERCREATED_ISSET_ID = 10;
  private static final int __USERMODIFIED_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VAT, new org.apache.thrift.meta_data.FieldMetaData("vat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALE, new org.apache.thrift.meta_data.FieldMetaData("sale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("shortDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLORS, new org.apache.thrift.meta_data.FieldMetaData("colors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZES, new org.apache.thrift.meta_data.FieldMetaData("sizes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_HOT, new org.apache.thrift.meta_data.FieldMetaData("isHot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDERING, new org.apache.thrift.meta_data.FieldMetaData("ordering", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED_AT, new org.apache.thrift.meta_data.FieldMetaData("modifiedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_CREATED, new org.apache.thrift.meta_data.FieldMetaData("userCreated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("userModified", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TProduct.class, metaDataMap);
  }

  public TProduct() {
  }

  public TProduct(
    int id,
    String code,
    String title,
    int price,
    int vat,
    int sale,
    String avatar,
    String images,
    String shortDescription,
    String description,
    String url,
    String tags,
    String colors,
    String sizes,
    int categoryId,
    int rate,
    int type,
    boolean isHot,
    String source,
    int ordering,
    int status,
    String createdAt,
    String modifiedAt,
    int userCreated,
    int userModified)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.code = code;
    this.title = title;
    this.price = price;
    setPriceIsSet(true);
    this.vat = vat;
    setVatIsSet(true);
    this.sale = sale;
    setSaleIsSet(true);
    this.avatar = avatar;
    this.images = images;
    this.shortDescription = shortDescription;
    this.description = description;
    this.url = url;
    this.tags = tags;
    this.colors = colors;
    this.sizes = sizes;
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.rate = rate;
    setRateIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.isHot = isHot;
    setIsHotIsSet(true);
    this.source = source;
    this.ordering = ordering;
    setOrderingIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.createdAt = createdAt;
    this.modifiedAt = modifiedAt;
    this.userCreated = userCreated;
    setUserCreatedIsSet(true);
    this.userModified = userModified;
    setUserModifiedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TProduct(TProduct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.price = other.price;
    this.vat = other.vat;
    this.sale = other.sale;
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetImages()) {
      this.images = other.images;
    }
    if (other.isSetShortDescription()) {
      this.shortDescription = other.shortDescription;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetTags()) {
      this.tags = other.tags;
    }
    if (other.isSetColors()) {
      this.colors = other.colors;
    }
    if (other.isSetSizes()) {
      this.sizes = other.sizes;
    }
    this.categoryId = other.categoryId;
    this.rate = other.rate;
    this.type = other.type;
    this.isHot = other.isHot;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.ordering = other.ordering;
    this.status = other.status;
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetModifiedAt()) {
      this.modifiedAt = other.modifiedAt;
    }
    this.userCreated = other.userCreated;
    this.userModified = other.userModified;
  }

  public TProduct deepCopy() {
    return new TProduct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.code = null;
    this.title = null;
    setPriceIsSet(false);
    this.price = 0;
    setVatIsSet(false);
    this.vat = 0;
    setSaleIsSet(false);
    this.sale = 0;
    this.avatar = null;
    this.images = null;
    this.shortDescription = null;
    this.description = null;
    this.url = null;
    this.tags = null;
    this.colors = null;
    this.sizes = null;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    setRateIsSet(false);
    this.rate = 0;
    setTypeIsSet(false);
    this.type = 0;
    setIsHotIsSet(false);
    this.isHot = false;
    this.source = null;
    setOrderingIsSet(false);
    this.ordering = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.createdAt = null;
    this.modifiedAt = null;
    setUserCreatedIsSet(false);
    this.userCreated = 0;
    setUserModifiedIsSet(false);
    this.userModified = 0;
  }

  public int getId() {
    return this.id;
  }

  public TProduct setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getCode() {
    return this.code;
  }

  public TProduct setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public TProduct setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getPrice() {
    return this.price;
  }

  public TProduct setPrice(int price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getVat() {
    return this.vat;
  }

  public TProduct setVat(int vat) {
    this.vat = vat;
    setVatIsSet(true);
    return this;
  }

  public void unsetVat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VAT_ISSET_ID);
  }

  /** Returns true if field vat is set (has been assigned a value) and false otherwise */
  public boolean isSetVat() {
    return EncodingUtils.testBit(__isset_bitfield, __VAT_ISSET_ID);
  }

  public void setVatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VAT_ISSET_ID, value);
  }

  public int getSale() {
    return this.sale;
  }

  public TProduct setSale(int sale) {
    this.sale = sale;
    setSaleIsSet(true);
    return this;
  }

  public void unsetSale() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALE_ISSET_ID);
  }

  /** Returns true if field sale is set (has been assigned a value) and false otherwise */
  public boolean isSetSale() {
    return EncodingUtils.testBit(__isset_bitfield, __SALE_ISSET_ID);
  }

  public void setSaleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALE_ISSET_ID, value);
  }

  public String getAvatar() {
    return this.avatar;
  }

  public TProduct setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public String getImages() {
    return this.images;
  }

  public TProduct setImages(String images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public String getShortDescription() {
    return this.shortDescription;
  }

  public TProduct setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  public void unsetShortDescription() {
    this.shortDescription = null;
  }

  /** Returns true if field shortDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetShortDescription() {
    return this.shortDescription != null;
  }

  public void setShortDescriptionIsSet(boolean value) {
    if (!value) {
      this.shortDescription = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public TProduct setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public TProduct setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getTags() {
    return this.tags;
  }

  public TProduct setTags(String tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getColors() {
    return this.colors;
  }

  public TProduct setColors(String colors) {
    this.colors = colors;
    return this;
  }

  public void unsetColors() {
    this.colors = null;
  }

  /** Returns true if field colors is set (has been assigned a value) and false otherwise */
  public boolean isSetColors() {
    return this.colors != null;
  }

  public void setColorsIsSet(boolean value) {
    if (!value) {
      this.colors = null;
    }
  }

  public String getSizes() {
    return this.sizes;
  }

  public TProduct setSizes(String sizes) {
    this.sizes = sizes;
    return this;
  }

  public void unsetSizes() {
    this.sizes = null;
  }

  /** Returns true if field sizes is set (has been assigned a value) and false otherwise */
  public boolean isSetSizes() {
    return this.sizes != null;
  }

  public void setSizesIsSet(boolean value) {
    if (!value) {
      this.sizes = null;
    }
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public TProduct setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public int getRate() {
    return this.rate;
  }

  public TProduct setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TProduct setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public boolean isIsHot() {
    return this.isHot;
  }

  public TProduct setIsHot(boolean isHot) {
    this.isHot = isHot;
    setIsHotIsSet(true);
    return this;
  }

  public void unsetIsHot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHOT_ISSET_ID);
  }

  /** Returns true if field isHot is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHot() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHOT_ISSET_ID);
  }

  public void setIsHotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHOT_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public TProduct setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public int getOrdering() {
    return this.ordering;
  }

  public TProduct setOrdering(int ordering) {
    this.ordering = ordering;
    setOrderingIsSet(true);
    return this;
  }

  public void unsetOrdering() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERING_ISSET_ID);
  }

  /** Returns true if field ordering is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdering() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERING_ISSET_ID);
  }

  public void setOrderingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERING_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TProduct setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public TProduct setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public String getModifiedAt() {
    return this.modifiedAt;
  }

  public TProduct setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  public void unsetModifiedAt() {
    this.modifiedAt = null;
  }

  /** Returns true if field modifiedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedAt() {
    return this.modifiedAt != null;
  }

  public void setModifiedAtIsSet(boolean value) {
    if (!value) {
      this.modifiedAt = null;
    }
  }

  public int getUserCreated() {
    return this.userCreated;
  }

  public TProduct setUserCreated(int userCreated) {
    this.userCreated = userCreated;
    setUserCreatedIsSet(true);
    return this;
  }

  public void unsetUserCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERCREATED_ISSET_ID);
  }

  /** Returns true if field userCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __USERCREATED_ISSET_ID);
  }

  public void setUserCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERCREATED_ISSET_ID, value);
  }

  public int getUserModified() {
    return this.userModified;
  }

  public TProduct setUserModified(int userModified) {
    this.userModified = userModified;
    setUserModifiedIsSet(true);
    return this;
  }

  public void unsetUserModified() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERMODIFIED_ISSET_ID);
  }

  /** Returns true if field userModified is set (has been assigned a value) and false otherwise */
  public boolean isSetUserModified() {
    return EncodingUtils.testBit(__isset_bitfield, __USERMODIFIED_ISSET_ID);
  }

  public void setUserModifiedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERMODIFIED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Integer)value);
      }
      break;

    case VAT:
      if (value == null) {
        unsetVat();
      } else {
        setVat((Integer)value);
      }
      break;

    case SALE:
      if (value == null) {
        unsetSale();
      } else {
        setSale((Integer)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((String)value);
      }
      break;

    case SHORT_DESCRIPTION:
      if (value == null) {
        unsetShortDescription();
      } else {
        setShortDescription((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((String)value);
      }
      break;

    case COLORS:
      if (value == null) {
        unsetColors();
      } else {
        setColors((String)value);
      }
      break;

    case SIZES:
      if (value == null) {
        unsetSizes();
      } else {
        setSizes((String)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case IS_HOT:
      if (value == null) {
        unsetIsHot();
      } else {
        setIsHot((Boolean)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case ORDERING:
      if (value == null) {
        unsetOrdering();
      } else {
        setOrdering((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case MODIFIED_AT:
      if (value == null) {
        unsetModifiedAt();
      } else {
        setModifiedAt((String)value);
      }
      break;

    case USER_CREATED:
      if (value == null) {
        unsetUserCreated();
      } else {
        setUserCreated((Integer)value);
      }
      break;

    case USER_MODIFIED:
      if (value == null) {
        unsetUserModified();
      } else {
        setUserModified((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case CODE:
      return getCode();

    case TITLE:
      return getTitle();

    case PRICE:
      return Integer.valueOf(getPrice());

    case VAT:
      return Integer.valueOf(getVat());

    case SALE:
      return Integer.valueOf(getSale());

    case AVATAR:
      return getAvatar();

    case IMAGES:
      return getImages();

    case SHORT_DESCRIPTION:
      return getShortDescription();

    case DESCRIPTION:
      return getDescription();

    case URL:
      return getUrl();

    case TAGS:
      return getTags();

    case COLORS:
      return getColors();

    case SIZES:
      return getSizes();

    case CATEGORY_ID:
      return Integer.valueOf(getCategoryId());

    case RATE:
      return Integer.valueOf(getRate());

    case TYPE:
      return Integer.valueOf(getType());

    case IS_HOT:
      return Boolean.valueOf(isIsHot());

    case SOURCE:
      return getSource();

    case ORDERING:
      return Integer.valueOf(getOrdering());

    case STATUS:
      return Integer.valueOf(getStatus());

    case CREATED_AT:
      return getCreatedAt();

    case MODIFIED_AT:
      return getModifiedAt();

    case USER_CREATED:
      return Integer.valueOf(getUserCreated());

    case USER_MODIFIED:
      return Integer.valueOf(getUserModified());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case TITLE:
      return isSetTitle();
    case PRICE:
      return isSetPrice();
    case VAT:
      return isSetVat();
    case SALE:
      return isSetSale();
    case AVATAR:
      return isSetAvatar();
    case IMAGES:
      return isSetImages();
    case SHORT_DESCRIPTION:
      return isSetShortDescription();
    case DESCRIPTION:
      return isSetDescription();
    case URL:
      return isSetUrl();
    case TAGS:
      return isSetTags();
    case COLORS:
      return isSetColors();
    case SIZES:
      return isSetSizes();
    case CATEGORY_ID:
      return isSetCategoryId();
    case RATE:
      return isSetRate();
    case TYPE:
      return isSetType();
    case IS_HOT:
      return isSetIsHot();
    case SOURCE:
      return isSetSource();
    case ORDERING:
      return isSetOrdering();
    case STATUS:
      return isSetStatus();
    case CREATED_AT:
      return isSetCreatedAt();
    case MODIFIED_AT:
      return isSetModifiedAt();
    case USER_CREATED:
      return isSetUserCreated();
    case USER_MODIFIED:
      return isSetUserModified();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TProduct)
      return this.equals((TProduct)that);
    return false;
  }

  public boolean equals(TProduct that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_vat = true;
    boolean that_present_vat = true;
    if (this_present_vat || that_present_vat) {
      if (!(this_present_vat && that_present_vat))
        return false;
      if (this.vat != that.vat)
        return false;
    }

    boolean this_present_sale = true;
    boolean that_present_sale = true;
    if (this_present_sale || that_present_sale) {
      if (!(this_present_sale && that_present_sale))
        return false;
      if (this.sale != that.sale)
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_shortDescription = true && this.isSetShortDescription();
    boolean that_present_shortDescription = true && that.isSetShortDescription();
    if (this_present_shortDescription || that_present_shortDescription) {
      if (!(this_present_shortDescription && that_present_shortDescription))
        return false;
      if (!this.shortDescription.equals(that.shortDescription))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_colors = true && this.isSetColors();
    boolean that_present_colors = true && that.isSetColors();
    if (this_present_colors || that_present_colors) {
      if (!(this_present_colors && that_present_colors))
        return false;
      if (!this.colors.equals(that.colors))
        return false;
    }

    boolean this_present_sizes = true && this.isSetSizes();
    boolean that_present_sizes = true && that.isSetSizes();
    if (this_present_sizes || that_present_sizes) {
      if (!(this_present_sizes && that_present_sizes))
        return false;
      if (!this.sizes.equals(that.sizes))
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_isHot = true;
    boolean that_present_isHot = true;
    if (this_present_isHot || that_present_isHot) {
      if (!(this_present_isHot && that_present_isHot))
        return false;
      if (this.isHot != that.isHot)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_ordering = true;
    boolean that_present_ordering = true;
    if (this_present_ordering || that_present_ordering) {
      if (!(this_present_ordering && that_present_ordering))
        return false;
      if (this.ordering != that.ordering)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_modifiedAt = true && this.isSetModifiedAt();
    boolean that_present_modifiedAt = true && that.isSetModifiedAt();
    if (this_present_modifiedAt || that_present_modifiedAt) {
      if (!(this_present_modifiedAt && that_present_modifiedAt))
        return false;
      if (!this.modifiedAt.equals(that.modifiedAt))
        return false;
    }

    boolean this_present_userCreated = true;
    boolean that_present_userCreated = true;
    if (this_present_userCreated || that_present_userCreated) {
      if (!(this_present_userCreated && that_present_userCreated))
        return false;
      if (this.userCreated != that.userCreated)
        return false;
    }

    boolean this_present_userModified = true;
    boolean that_present_userModified = true;
    if (this_present_userModified || that_present_userModified) {
      if (!(this_present_userModified && that_present_userModified))
        return false;
      if (this.userModified != that.userModified)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TProduct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVat()).compareTo(other.isSetVat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vat, other.vat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSale()).compareTo(other.isSetSale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sale, other.sale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortDescription()).compareTo(other.isSetShortDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortDescription, other.shortDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColors()).compareTo(other.isSetColors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colors, other.colors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSizes()).compareTo(other.isSetSizes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizes, other.sizes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHot()).compareTo(other.isSetIsHot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHot, other.isHot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrdering()).compareTo(other.isSetOrdering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordering, other.ordering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedAt()).compareTo(other.isSetModifiedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedAt, other.modifiedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserCreated()).compareTo(other.isSetUserCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userCreated, other.userCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserModified()).compareTo(other.isSetUserModified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserModified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userModified, other.userModified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TProduct(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vat:");
    sb.append(this.vat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sale:");
    sb.append(this.sale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("avatar:");
    if (this.avatar == null) {
      sb.append("null");
    } else {
      sb.append(this.avatar);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("images:");
    if (this.images == null) {
      sb.append("null");
    } else {
      sb.append(this.images);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortDescription:");
    if (this.shortDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.shortDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("colors:");
    if (this.colors == null) {
      sb.append("null");
    } else {
      sb.append(this.colors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizes:");
    if (this.sizes == null) {
      sb.append("null");
    } else {
      sb.append(this.sizes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHot:");
    sb.append(this.isHot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ordering:");
    sb.append(this.ordering);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifiedAt:");
    if (this.modifiedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.modifiedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userCreated:");
    sb.append(this.userCreated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userModified:");
    sb.append(this.userModified);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TProductStandardSchemeFactory implements SchemeFactory {
    public TProductStandardScheme getScheme() {
      return new TProductStandardScheme();
    }
  }

  private static class TProductStandardScheme extends StandardScheme<TProduct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TProduct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.price = iprot.readI32();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vat = iprot.readI32();
              struct.setVatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sale = iprot.readI32();
              struct.setSaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.images = iprot.readString();
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHORT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortDescription = iprot.readString();
              struct.setShortDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tags = iprot.readString();
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLORS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colors = iprot.readString();
              struct.setColorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SIZES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sizes = iprot.readString();
              struct.setSizesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rate = iprot.readI32();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IS_HOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHot = iprot.readBool();
              struct.setIsHotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORDERING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ordering = iprot.readI32();
              struct.setOrderingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MODIFIED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifiedAt = iprot.readString();
              struct.setModifiedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // USER_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userCreated = iprot.readI32();
              struct.setUserCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // USER_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userModified = iprot.readI32();
              struct.setUserModifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TProduct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI32(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VAT_FIELD_DESC);
      oprot.writeI32(struct.vat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALE_FIELD_DESC);
      oprot.writeI32(struct.sale);
      oprot.writeFieldEnd();
      if (struct.avatar != null) {
        oprot.writeFieldBegin(AVATAR_FIELD_DESC);
        oprot.writeString(struct.avatar);
        oprot.writeFieldEnd();
      }
      if (struct.images != null) {
        oprot.writeFieldBegin(IMAGES_FIELD_DESC);
        oprot.writeString(struct.images);
        oprot.writeFieldEnd();
      }
      if (struct.shortDescription != null) {
        oprot.writeFieldBegin(SHORT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.shortDescription);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        oprot.writeString(struct.tags);
        oprot.writeFieldEnd();
      }
      if (struct.colors != null) {
        oprot.writeFieldBegin(COLORS_FIELD_DESC);
        oprot.writeString(struct.colors);
        oprot.writeFieldEnd();
      }
      if (struct.sizes != null) {
        oprot.writeFieldBegin(SIZES_FIELD_DESC);
        oprot.writeString(struct.sizes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI32(struct.rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_HOT_FIELD_DESC);
      oprot.writeBool(struct.isHot);
      oprot.writeFieldEnd();
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDERING_FIELD_DESC);
      oprot.writeI32(struct.ordering);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.modifiedAt != null) {
        oprot.writeFieldBegin(MODIFIED_AT_FIELD_DESC);
        oprot.writeString(struct.modifiedAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_CREATED_FIELD_DESC);
      oprot.writeI32(struct.userCreated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_MODIFIED_FIELD_DESC);
      oprot.writeI32(struct.userModified);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TProductTupleSchemeFactory implements SchemeFactory {
    public TProductTupleScheme getScheme() {
      return new TProductTupleScheme();
    }
  }

  private static class TProductTupleScheme extends TupleScheme<TProduct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TProduct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetPrice()) {
        optionals.set(3);
      }
      if (struct.isSetVat()) {
        optionals.set(4);
      }
      if (struct.isSetSale()) {
        optionals.set(5);
      }
      if (struct.isSetAvatar()) {
        optionals.set(6);
      }
      if (struct.isSetImages()) {
        optionals.set(7);
      }
      if (struct.isSetShortDescription()) {
        optionals.set(8);
      }
      if (struct.isSetDescription()) {
        optionals.set(9);
      }
      if (struct.isSetUrl()) {
        optionals.set(10);
      }
      if (struct.isSetTags()) {
        optionals.set(11);
      }
      if (struct.isSetColors()) {
        optionals.set(12);
      }
      if (struct.isSetSizes()) {
        optionals.set(13);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(14);
      }
      if (struct.isSetRate()) {
        optionals.set(15);
      }
      if (struct.isSetType()) {
        optionals.set(16);
      }
      if (struct.isSetIsHot()) {
        optionals.set(17);
      }
      if (struct.isSetSource()) {
        optionals.set(18);
      }
      if (struct.isSetOrdering()) {
        optionals.set(19);
      }
      if (struct.isSetStatus()) {
        optionals.set(20);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(21);
      }
      if (struct.isSetModifiedAt()) {
        optionals.set(22);
      }
      if (struct.isSetUserCreated()) {
        optionals.set(23);
      }
      if (struct.isSetUserModified()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetPrice()) {
        oprot.writeI32(struct.price);
      }
      if (struct.isSetVat()) {
        oprot.writeI32(struct.vat);
      }
      if (struct.isSetSale()) {
        oprot.writeI32(struct.sale);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetImages()) {
        oprot.writeString(struct.images);
      }
      if (struct.isSetShortDescription()) {
        oprot.writeString(struct.shortDescription);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetTags()) {
        oprot.writeString(struct.tags);
      }
      if (struct.isSetColors()) {
        oprot.writeString(struct.colors);
      }
      if (struct.isSetSizes()) {
        oprot.writeString(struct.sizes);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeI32(struct.categoryId);
      }
      if (struct.isSetRate()) {
        oprot.writeI32(struct.rate);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetIsHot()) {
        oprot.writeBool(struct.isHot);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetOrdering()) {
        oprot.writeI32(struct.ordering);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetModifiedAt()) {
        oprot.writeString(struct.modifiedAt);
      }
      if (struct.isSetUserCreated()) {
        oprot.writeI32(struct.userCreated);
      }
      if (struct.isSetUserModified()) {
        oprot.writeI32(struct.userModified);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TProduct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.price = iprot.readI32();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vat = iprot.readI32();
        struct.setVatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sale = iprot.readI32();
        struct.setSaleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(7)) {
        struct.images = iprot.readString();
        struct.setImagesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shortDescription = iprot.readString();
        struct.setShortDescriptionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tags = iprot.readString();
        struct.setTagsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.colors = iprot.readString();
        struct.setColorsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.sizes = iprot.readString();
        struct.setSizesIsSet(true);
      }
      if (incoming.get(14)) {
        struct.categoryId = iprot.readI32();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.rate = iprot.readI32();
        struct.setRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isHot = iprot.readBool();
        struct.setIsHotIsSet(true);
      }
      if (incoming.get(18)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.ordering = iprot.readI32();
        struct.setOrderingIsSet(true);
      }
      if (incoming.get(20)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(21)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(22)) {
        struct.modifiedAt = iprot.readString();
        struct.setModifiedAtIsSet(true);
      }
      if (incoming.get(23)) {
        struct.userCreated = iprot.readI32();
        struct.setUserCreatedIsSet(true);
      }
      if (incoming.get(24)) {
        struct.userModified = iprot.readI32();
        struct.setUserModifiedIsSet(true);
      }
    }
  }

}

